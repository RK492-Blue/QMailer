const passport = require('passport');  // passport npm
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');  // no need for .js extension.  Node automatically assumes.

const User = mongoose.model('users');

passport.serializeUser((user, done) => {        // user = existing user that we took out from the database
    done(null, user.id);                        // user.id is a unique id generated by Mongo, NOT the google id
                                                // after user has signed in, we only need to use our internal id
});

passport.deserializeUser((id, done) => {
    User.findById(id)
    .then(user => {
        done(null, user);
    });
});

passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClientID,
            clientSecret: keys.googleClientSecret,
            callbackURL: '/auth/google/callback',
            proxy: true
        }, 
        async (accessToken, refreshToken, profile, done) => {
            const existingUser = await User.findOne({ googleId: profile.id })
            if (existingUser){
                return done(null, existingUser);
            } 
            
            const user = await new User({ googleId: profile.id }).save()
            done(null, user);
        }
    )
);
